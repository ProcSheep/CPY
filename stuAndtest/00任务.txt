1. 做一个上传图片，存储图片，信息存入数据库demo v
2. 做一个下载图片，存储到本地demo，重定向问题 v
1&2: 对图片进行sharp处理， 例如缩放 压缩等等 
uuid：在干什么
3. 做一个日志处理文件，解决时区问题demo (日期格式化) v ， 自己简单学习一下，有优秀的库date-fns，学习下api

实现业务后最好封装为demo js小工具 v
一个优秀的 JavaScript 小工具应满足的条件
单一职责：专注解决一个具体问题（如日期格式化、DOM 操作简化），避免功能堆砌，保持逻辑清晰。
低耦合：
不依赖特定框架（如 Vue/React），或可通过适配层兼容框架，减少外部依赖。
内部模块间通过明确接口交互，避免直接操作彼此的私有状态。
高内聚：相关功能集中在工具内部，形成完整的逻辑闭环（如验证工具应包含规则定义、错误提示、验证执行等相关能力）。
API 设计友好：
接口简洁直观，命名符合直觉（如formatDate()而非handleTimeStr()）。
支持链式调用或配置化参数（如utils.date.format(xxx).add(1, 'day')）。
无副作用：核心功能应避免修改输入参数或全局变量（纯函数优先），确保调用结果可预测。

// 拖拽上传 v
// 多文件上传, 单个上传 v
// 上传文件进度 
// 取消上传



// 了解浏览器 网络传输调试

拓展（学）: 每次图片加载后会缓存到本地，点击加载过的页码会重新进行网络请求而不是调用缓存本就有的 -> redies + Node.js 解决缓存数据的获取
  

2.看看查询速度的优化
$expr在查询中如何用
// 问题： 找到$expr中使用$size方法，无法使用索引，只能一个个数据进行比较
// 不推荐在大体量数据库中应用，适合小体量数据库进行测试
  -- 优化1: 新字段，直接获取message数组长度, 直接加字段可能需要额外的维护许多代码 ------ 难度大
  -- 次级优化： 采用复合索引减少查询范围， 加索引也需要内存空间 ----- 难度小
 
  -- 分页优化： 获取上一页最后一个数据的日期 --- 不存在
  -- 查询缓存redis 不适用于第一次查 --- 要学

